  tripduration	INTEGER	NULLABLE				Trip Duration (in seconds)	
starttime	DATETIME	NULLABLE				Start Time, in NYC local time.	
stoptime	DATETIME	NULLABLE				Stop Time, in NYC local time.	
start_station_id	INTEGER	NULLABLE				Start Station ID	
  start_station_name	STRING	NULLABLE				Start Station Name	
start_station_latitude	FLOAT	NULLABLE				Start Station Latitude	
start_station_longitude	FLOAT	NULLABLE				Start Station Longitude	
  end_station_id	INTEGER	NULLABLE				End Station ID	
  end_station_name	STRING	NULLABLE				End Station Name	
  end_station_latitude	FLOAT	NULLABLE				End Station Latitude	
  end_station_longitude	FLOAT	NULLABLE				End Station Longitude	
bikeid	INTEGER	NULLABLE				Bike ID	
  usertype	STRING	NULLABLE				User Type (Customer = 24-hour pass or 7-day pass user, Subscriber = Annual Member)	
  birth_year	INTEGER	NULLABLE				Year of Birth	
  gender	STRING	NULLABLE				Gender (unknown, male, female)	

CREATE TABLE "raw".citibike_trips_201306
(
    tripduration integer,
    starttime timestamp without time zone,
    stoptime timestamp without time zone,
    start_station_id integer,
    start_station_name character varying,
    start_station_latitude double precision,
    start_station_longitude double precision,
    end_station_id integer,
    end_station_name character varying,
    end_station_latitude double precision,
    end_station_longitude double precision,
    bikeid integer,
    usertype character varying,
    birth_year integer,
    gender character varying
);

tripduration                 int64
starttime                   object
stoptime                    object
start_station_id             int64
start_station_name          object
start_station_latitude     float64
start_station_longitude    float64
end_station_id               int64
end_station_name            object
end_station_latitude       float64
end_station_longitude      float64
bikeid                       int64
usertype                    object
birth_year                 float64
gender                       int64

https://stackoverflow.com/questions/15891038/change-column-type-in-pandas

https://stackoverflow.com/questions/76371020/how-can-i-create-a-task-workflow-in-airflow-based-on-a-list
https://patrickod.com/2022/11/29/til-a-simple-etl-task-in-airflow-using-postgreshook/
        #pg_hook = PostgresHook(schema="public", postgres_conn_id="postgres_conn")
        #pg_hook.bulk_load("citibike_trips", "201306-citibike-tripdata.csv", delimiter=",", quotechar='"', null="\\N", header=True, overwrite=True)
        pg_hook.bulk_load("citibike_trips", "201306-citibike-tripdata.csv")

https://stackoverflow.com/questions/34339461/how-to-get-all-the-filename-and-filesize-in-current-directory-in-python
        print(os.listdir("./"))
        theFiles = list(os.listdir("./"))
        theDict = dict()
        for something in theFiles: #Calculate size for all files here. 
            theStats = os.stat(something)
            theDict[something] = theStats
        for item in theDict:
            print("The File: {:30s} The Size: {:d} Bytes".format(item,theDict[item].st_size))

wc *.csv
  577704 6820162 100938999 201306-citibike-tripdata.csv
  843417 10058395 164438561 2013-07 - Citi Bike trip data.csv
 1001959 11978786 195523200 2013-08 - Citi Bike trip data.csv
 1034360 12394121 201965642 2013-09 - Citi Bike trip data.csv
 1037713 12441650 202728202 2013-10 - Citi Bike trip data.csv
  675775 8118180 131891356 2013-11 - Citi Bike trip data.csv
  443967 5343836 86622375 2013-12 - Citi Bike trip data.csv
  300401 3619785 58633836 2014-01 - Citi Bike trip data.csv
  224737 2707182 43899524 2014-02 - Citi Bike trip data.csv
  439118 5328775 85757372 2014-03 - Citi Bike trip data.csv
  670781 8113887 130951034 2014-04 - Citi Bike trip data.csv
  866118 10476876 169192738 2014-05 - Citi Bike trip data.csv
  936881 11326778 183131443 2014-06 - Citi Bike trip data.csv
  968843 11720766 189253575 2014-07 - Citi Bike trip data.csv
  963490 11657780 188229211 2014-08 - Citi Bike trip data.csv
  953888 11470591 183863504 201409-citibike-tripdata.csv
  828712 9975613 161314228 201410-citibike-tripdata.csv
  529189 6381685 102967304 201411-citibike-tripdata.csv
  399070 4826066 77620137 201412-citibike-tripdata.csv

ALL_FILES = ['201306-citibike-tripdata.zip', '201307-citibike-tripdata.zip', '201308-citibike-tripdata.zip', '201309-citibike-tripdata.zip', '201310-citibike-tripdata.zip', '201311-citibike-tripdata.zip', '201312-citibike-tripdata.zip', '201401-citibike-tripdata.zip', '201402-citibike-tripdata.zip', '201403-citibike-tripdata.zip', '201404-citibike-tripdata.zip', '201405-citibike-tripdata.zip', '201406-citibike-tripdata.zip', '201407-citibike-tripdata.zip', '201408-citibike-tripdata.zip', '201409-citibike-tripdata.zip', '201410-citibike-tripdata.zip', '201411-citibike-tripdata.zip', '201412-citibike-tripdata.zip']

FILE_DICT = {'201306-citibike-tripdata.zip':'201306-citibike-tripdata.csv', 
             '201307-citibike-tripdata.zip':'2013-07 - Citi Bike trip data.csv',
             '201308-citibike-tripdata.zip':'2013-08 - Citi Bike trip data.csv',
             '201309-citibike-tripdata.zip':'2013-09 - Citi Bike trip data.csv', 
             '201310-citibike-tripdata.zip':'2013-10 - Citi Bike trip data.csv', 
             '201311-citibike-tripdata.zip':'2013-11 - Citi Bike trip data.csv', 
             '201312-citibike-tripdata.zip':'2013-12 - Citi Bike trip data.csv', 
             '201401-citibike-tripdata.zip':'2014-01 - Citi Bike trip data.csv', 
             '201402-citibike-tripdata.zip':'2014-02 - Citi Bike trip data.csv', 
             '201403-citibike-tripdata.zip':'2014-03 - Citi Bike trip data.csv', 
             '201404-citibike-tripdata.zip':'2014-04 - Citi Bike trip data.csv', 
             '201405-citibike-tripdata.zip':'2014-05 - Citi Bike trip data.csv', 
             '201406-citibike-tripdata.zip':'2014-06 - Citi Bike trip data.csv', 
             '201407-citibike-tripdata.zip':'2014-07 - Citi Bike trip data.csv', 
             '201408-citibike-tripdata.zip':'2014-08 - Citi Bike trip data.csv', 
             '201409-citibike-tripdata.zip':'201409-citibike-tripdata.csv', 
             '201410-citibike-tripdata.zip':'201410-citibike-tripdata.csv', 
             '201411-citibike-tripdata.zip':'201411-citibike-tripdata.csv', 
             '201412-citibike-tripdata.zip':'201412-citibike-tripdata.csv'}

select 'cnt201306' as table_name, count(*) from raw.citibike_trips_201306
union
select 'cnt201307' as table_name, count(*) from raw.citibike_trips_201307
union
select 'cnt201308' as table_name, count(*) from raw.citibike_trips_201308
union
select 'cnt201309' as table_name, count(*) from raw.citibike_trips_201309
union
select 'cnt201310' as table_name, count(*) from raw.citibike_trips_201310
union
select 'cnt201311' as table_name, count(*) from raw.citibike_trips_201311
union
select 'cnt201312' as table_name, count(*) from raw.citibike_trips_201312
union
select 'cnt201401' as table_name, count(*) from raw.citibike_trips_201401
union
select 'cnt201402' as table_name, count(*) from raw.citibike_trips_201402
union
select 'cnt201403' as table_name, count(*) from raw.citibike_trips_201403
union
select 'cnt201404' as table_name, count(*) from raw.citibike_trips_201404
union
select 'cnt201405' as table_name, count(*) from raw.citibike_trips_201405
union
select 'cnt201406' as table_name, count(*) from raw.citibike_trips_201406
union
select 'cnt201407' as table_name, count(*) from raw.citibike_trips_201407
union
select 'cnt201408' as table_name, count(*) from raw.citibike_trips_201408
union
select 'cnt201409' as table_name, count(*) from raw.citibike_trips_201409
union
select 'cnt201410' as table_name, count(*) from raw.citibike_trips_201410
union
select 'cnt201411' as table_name, count(*) from raw.citibike_trips_201411
union
select 'cnt201412' as table_name, count(*) from raw.citibike_trips_201412
order by table_name asc;

pgadmin4 macos desktop version

CREATE TABLE "raw"."citibike_trips_201412"
(
)
    INHERITS (raw.citibike_trips_201306);

COPY raw.citibike_trips_201412 (tripduration, starttime, stoptime, start_station_id, start_station_name, start_station_latitude, start_station_longitude, end_station_id, end_station_name, end_station_latitude, end_station_longitude, bikeid, usertype, birth_year, gender) 
FROM '/Users/huangpan/Documents/CriticalRiver/data/citibike-tripdata/201412-citibike-tripdata.csv' DELIMITER ',' CSV HEADER QUOTE '\"' NULL '\"\"' ESCAPE '''';  ''''''

ny-citibike-pipeline
KEY ID
1CsD6LowRGu0fiKn8LsKG1uEZvQJ8ex2
KEY SECRET
DABqNt-okF0WUcx8MAXfmA8uVi4lP6pRvlC5Kzjla9LXppQo57Su2bzLBuwWvINy

postgres
raw.citibike_trips_201306 NULL
raw.citibike_trips_201307 \N
raw.citibike_trips_201308 \N
raw.citibike_trips_201309 \N
raw.citibike_trips_201310 \N
raw.citibike_trips_201311 \N
raw.citibike_trips_201312 \N
raw.citibike_trips_201401 \N
raw.citibike_trips_201402 \N
raw.citibike_trips_201403 \N
raw.citibike_trips_201404 \N
raw.citibike_trips_201405 \N
raw.citibike_trips_201406 \N
raw.citibike_trips_201407 \N
raw.citibike_trips_201408 \N
raw.citibike_trips_201409 1. use Modern CSV macos desktop tool to read in csv and write out a cleaned version (open in write mode, set parsing standard of output to sparse quotes) 2. set NULL field empty in import data 3. starttime / endtime different format
raw.citibike_trips_201410 1. use Modern CSV macos desktop tool to read in csv and write out a cleaned version 2. set NULL field empty in import data 3. starttime / endtime different format
raw.citibike_trips_201411 1. use Modern CSV macos desktop tool to read in csv and write out a cleaned version 2. set NULL field empty in import data 3. starttime / endtime different format
raw.citibike_trips_201412 1. use Modern CSV macos desktop tool to read in csv and write out a cleaned version 2. set NULL field empty in import data 3. starttime / endtime different format



--SELECT starttime, stoptime, bikeid -- 22326
SELECT count(*)
FROM `ny-citibike-pipeline.raw.citibike_trips_201307` 
WHERE DATE(starttime) in
(SELECT date FROM `ny-citibike-pipeline.raw.us_holidays_2013` 
where type='Public'
order by date asc)
--order by starttime asc, bikeid asc



https://gis.stackexchange.com/questions/10352/creating-circle-in-postgis
https://cloud.google.com/bigquery/docs/reference/standard-sql/geography_functions#st_buffer

https://gis.stackexchange.com/questions/145007/creating-geometry-from-lat-lon-in-table-using-postgis

SELECT start_station_id, start_station_latitude, start_station_longitude, z.ZIP
FROM `ny-citibike-pipeline.raw.citibike_trips_201306` t
left join `ny-citibike-pipeline.raw.us_zip_codes` z
on t.start_station_latitude = z.LAT and t.start_station_longitude = z.LNG
LIMIT 1000

WITH points AS (
  SELECT ST_GEOGPOINT(-122.4194, 37.7749) point
  UNION ALL 
  SELECT ST_GEOGPOINT(-74.0060, 40.7128) point
)
SELECT ST_Buffer(point, 1609.34) -- 1 mile
FROM points

https://stackoverflow.com/questions/47069022/create-table-as-in-bigquery

create table `ny-citibike-pipeline.raw.us_zip_codes_geog` AS
SELECT ZIP zip, LAT lat, LNG lng,  ST_Buffer(ST_GEOGPOINT(LNG, LAT), 1609.34) zip_geog 
FROM `ny-citibike-pipeline.raw.us_zip_codes`;


WITH data AS (
  SELECT ST_GEOGPOINT(-122.4194, 37.7749) point
  UNION ALL 
  SELECT ST_GEOGPOINT(-74.0060, 40.7128) point
)
SELECT zip_code, city, county
FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
JOIN data
ON ST_WITHIN(point, zip_code_geom)

https://stackoverflow.com/questions/57872802/linking-latitude-and-longitude-data-to-zipcodes-in-big-query

/*
WITH data AS (
  SELECT ST_GEOGPOINT(-122.4194, 37.7749) point
  UNION ALL 
  SELECT ST_GEOGPOINT(-74.0060, 40.7128) point
)
SELECT zip_code, city, county
FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
JOIN data
ON ST_WITHIN(point, zip_code_geom)

WITH data AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
)
SELECT zip_code, city, county
FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
JOIN data
ON ST_WITHIN(point, zip_code_geom)


WITH data AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
)
SELECT start_station_id, zip
FROM `ny-citibike-pipeline.raw.us_zip_codes_geog` 
JOIN data
ON ST_WITHIN(point, zip_geog)

SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point, z.zip
FROM `ny-citibike-pipeline.raw.citibike_trips_201306` t
LEFT JOIN `ny-citibike-pipeline.raw.us_zip_codes_geog` z
ON ST_WITHIN(ST_GEOGPOINT(start_station_longitude, start_station_latitude), z.zip_geog)

--SELECT * FROM `ny-citibike-pipeline.raw.us_zip_codes` LIMIT 1000

--UPDATE `ny-citibike-pipeline.raw.us_zip_codes_geog` SET ZIP_GEOG = ST_Buffer(ST_MakePoint(LNG, LAT), 1609.34);


create or replace table `ny-citibike-pipeline.raw.us_zip_codes_geog` AS
SELECT ZIP zip, LAT lat, LNG lng,  ST_Buffer(ST_GEOGPOINT(LNG, LAT), 1609.34) zip_geog -- one mile = 1609.34 m
FROM `ny-citibike-pipeline.raw.us_zip_codes`;

SELECT zip, lat, lng, zip_geog 
FROM `ny-citibike-pipeline.raw.us_zip_codes_geog` LIMIT 1000

WITH data AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
)
SELECT start_station_id, zip
FROM `ny-citibike-pipeline.raw.us_zip_codes_geog` 
JOIN data
ON ST_WITHIN(point, zip_geog)
-- 6m results, not accurate

WITH data AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
)
SELECT start_station_id, zip_code, city, county
FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
JOIN data
ON ST_WITHIN(point, zip_code_geom)
-- 572k, accurate

-- 36 count distinct zip codes, matches up
WITH temp_cte1 AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
), temp_cte2 AS (
  SELECT start_station_id, zip_code, city, county
  FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
  JOIN temp_cte1
  ON ST_WITHIN(point, zip_code_geom)
)
SELECT count(distinct zip_code)
from temp_cte2

WITH temp_cte1 AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
), temp_cte2 AS (
  SELECT start_station_id, zip_code, city, county
  FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
  JOIN temp_cte1
  ON ST_WITHIN(point, zip_code_geom)
)
SELECT zip_code, count(*) zip_code_cnt
from temp_cte2
group by zip_code
order by zip_code_cnt desc

*/


WITH temp_cte1 AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.cbdev_stg.stg_citibike_trips`
), temp_cte2 AS (
  SELECT start_station_id, zip_code, city, county
  FROM `ny-citibike-pipeline.cbdev_stg.stg_zip_codes` 
  JOIN temp_cte1
  ON ST_WITHIN(point, zip_code_geom)
)
SELECT count(distinct zip_code)
from temp_cte2 -- 37 distinct zip codes in manhattan
-- https://bklyndesigns.com/new-york-city-zip-code/ NYC has 178 zip codes


WITH temp_cte1 AS (
  SELECT start_station_id, ST_GEOGPOINT(start_station_longitude, start_station_latitude) point
  FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
), temp_cte2 AS (
  SELECT start_station_id, zip_code, city, county
  FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
  JOIN temp_cte1
  ON ST_WITHIN(point, zip_code_geom)
)
SELECT count(distinct zip_code)
from temp_cte2


create or replace table `ny-citibike-pipeline.raw.citibike_trips` AS
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201306`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201307`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201308`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201309`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201310`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201311`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201312`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201401`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201402`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201403`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201404`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201405`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201406`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201407`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201408`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201409`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201410`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201411`
UNION ALL
SELECT * FROM `ny-citibike-pipeline.raw.citibike_trips_201412`


geojson map viewer
https://geojson.io/
https://jsonformatter.org/

{
    "type": "Point",
    "coordinates": [
        -105.01621,
        39.57422
    ]
}

{
    "type": "Polygon",
    "coordinates": [
      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],
        [100.0, 1.0], [100.0, 0.0] ]
      ]    
}

{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Polygon",
        "coordinates": [
        ]
      }
    }
  ]
}



10003 1 mile circle

{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Polygon",
        "coordinates": [
[[-73.9857984489329, 40.7460733880762], 
[-73.9895314969207, 40.7462996829528], 
[-73.9932510668282, 40.7459697578024], 
[-73.9968141278534, 40.7450962995423], 
[-74.0000836787514, 40.7437128951714], 
[-74.0029340241121, 40.741872737918], 
[-74.0052556121332, 40.7396465785174], 
[-74.0069592468557, 40.7371200010413], 
[-74.007979512649, 40.73439012877], 
[-74.0082772798495, 40.7315618874873], 
[-74.0078411965183, 40.728743970455], 
[-74.0066881108202, 40.7260446605526], 
[-74.0048624099021, 40.723567670263], 
[-74.0024343027565, 40.7214081591801], 
[-73.9994971147842, 40.7196490816094], 
[-73.9961636991395, 40.7183580039295], 
[-73.992562103099, 40.7175845132249], 
[-73.988830655499, 40.7173583159875], 
[-73.9851126627749, 40.7176880992991], 
[-73.9815509156166, 40.718561197836], 
[-73.9782822152446, 40.719944079364], 
[-73.9754321275844, 40.721783630253], 
[-73.9731101652056, 40.724009192081], 
[-73.97140558106, 40.7265352717514], 
[-73.9703839353189, 40.7292648217703], 
[-73.9700845677308, 40.7320929654139], 
[-73.9705190738789, 40.734911024285], 
[-73.9716708457102, 40.7376106939104], 
[-73.9734956961021, 40.7400882070429], 
[-73.975923545547, 40.7422483244902], 
[-73.9788611078767, 40.7440079996335], 
[-73.9821954729446, 40.7452995751191], 
[-73.9857984489329, 40.7460733880762]]          
        ]
      }
    }
  ]
}

[[-73.9857984489329, 40.7460733880762], 
[-73.9895314969207, 40.7462996829528], 
[-73.9932510668282, 40.7459697578024], 
[-73.9968141278534, 40.7450962995423], 
[-74.0000836787514, 40.7437128951714], 
[-74.0029340241121, 40.741872737918], 
[-74.0052556121332, 40.7396465785174], 
[-74.0069592468557, 40.7371200010413], 
[-74.007979512649, 40.73439012877], 
[-74.0082772798495, 40.7315618874873], 
[-74.0078411965183, 40.728743970455], 
[-74.0066881108202, 40.7260446605526], 
[-74.0048624099021, 40.723567670263], 
[-74.0024343027565, 40.7214081591801], 
[-73.9994971147842, 40.7196490816094], 
[-73.9961636991395, 40.7183580039295], 
[-73.992562103099, 40.7175845132249], 
[-73.988830655499, 40.7173583159875], 
[-73.9851126627749, 40.7176880992991], 
[-73.9815509156166, 40.718561197836], 
[-73.9782822152446, 40.719944079364], 
[-73.9754321275844, 40.721783630253], 
[-73.9731101652056, 40.724009192081], 
[-73.97140558106, 40.7265352717514], 
[-73.9703839353189, 40.7292648217703], 
[-73.9700845677308, 40.7320929654139], 
[-73.9705190738789, 40.734911024285], 
[-73.9716708457102, 40.7376106939104], 
[-73.9734956961021, 40.7400882070429], 
[-73.975923545547, 40.7422483244902], 
[-73.9788611078767, 40.7440079996335], 
[-73.9821954729446, 40.7452995751191], 
[-73.9857984489329, 40.7460733880762]]


10003 actual

{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "type": "Polygon",
        "coordinates": [
[[-73.999366, 40.731323], 
[-73.999604, 40.731043], 
[-73.998842, 40.730669], 
[-73.998488, 40.730494], 
[-73.998072, 40.730288], 
[-73.99736, 40.729941], 
[-73.996572, 40.729552], 
[-73.995812, 40.72918], 
[-73.995061, 40.72881], 
[-73.994252, 40.728412], 
[-73.993724, 40.728152], 
[-73.993147, 40.727867], 
[-73.993432, 40.727532], 
[-73.99364, 40.727289], 
[-73.991794, 40.726391], 
[-73.992061, 40.725642], 
[-73.992132, 40.725445], 
[-73.992209, 40.725231], 
[-73.992326, 40.724909], 
[-73.992604, 40.724136], 
[-73.991256, 40.723723], 
[-73.991022, 40.723649], 
[-73.990274, 40.723426], 
[-73.989392, 40.723174], 
[-73.988643, 40.722933], 
[-73.988451, 40.723277], 
[-73.987968, 40.723942], 
[-73.987502, 40.724584], 
[-73.987053, 40.725203], 
[-73.986623, 40.725796], 
[-73.986176, 40.726409], 
[-73.985753, 40.726988], 
[-73.985307, 40.727599], 
[-73.984875, 40.728194], 
[-73.984448, 40.728781], 
[-73.984009, 40.729381], 
[-73.983543, 40.730021], 
[-73.983077, 40.730659], 
[-73.982564, 40.731361], 
[-73.982022, 40.732012], 
[-73.981562, 40.732643], 
[-73.981127, 40.733242], 
[-73.980711, 40.733813], 
[-73.980275, 40.73441], 
[-73.979864, 40.734975], 
[-73.982267, 40.73602], 
[-73.982572, 40.736148], 
[-73.984508, 40.736962], 
[-73.984446, 40.737046], 
[-73.984082, 40.737546], 
[-73.984981, 40.737927], 
[-73.985387, 40.737332], 
[-73.98612, 40.73764], 
[-73.986835, 40.737941], 
[-73.986425, 40.738535], 
[-73.986854, 40.738714], 
[-73.987302, 40.738903], 
[-73.987726, 40.738317], 
[-73.989765, 40.739177], 
[-73.990945, 40.739673], 
[-73.991375, 40.739088], 
[-73.991798, 40.738504],
[-73.992225, 40.737917], 
[-73.992654, 40.73733], 
[-73.99312, 40.736691], 
[-73.993617, 40.736005], 
[-73.994118, 40.735313], 
[-73.994585, 40.734672], 
[-73.99505, 40.734034], 
[-73.995489, 40.733437], 
[-73.995914, 40.732847], 
[-73.996351, 40.732255], 
[-73.996639, 40.731856], 
[-73.996974, 40.731409], 
[-73.998612, 40.732215], 
[-73.999108, 40.731627], 
[-73.999366, 40.731323]]
        ]
      }
    }
  ]
}


https://s3.amazonaws.com/tripdata/201306-citibike-tripdata.zip
ALL_FILES = ['201306-citibike-tripdata.zip', '201307-citibike-tripdata.zip', '201308-citibike-tripdata.zip', '201309-citibike-tripdata.zip', '201310-citibike-tripdata.zip', '201311-citibike-tripdata.zip', '201312-citibike-tripdata.zip', '201401-citibike-tripdata.zip', '201402-citibike-tripdata.zip', '201403-citibike-tripdata.zip', '201404-citibike-tripdata.zip', '201405-citibike-tripdata.zip', '201406-citibike-tripdata.zip', '201407-citibike-tripdata.zip', '201408-citibike-tripdata.zip', '201409-citibike-tripdata.zip', '201410-citibike-tripdata.zip', '201411-citibike-tripdata.zip', '201412-citibike-tripdata.zip']
    if key['Key'][:6] in ALLMONTHS:

        # get csv file name
        csv_file = key["Key"].replace(".zip", ".csv")
        print(csv_file)
        # Clean csv file: output in consistent format
        df = pd.read_csv(csv_file)
        print(df.head())
